% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glmSparseNet.R
\name{cv.glmSparseNet}
\alias{cv.glmSparseNet}
\title{Calculate cross validating GLM model with network-based regularization}
\usage{
cv.glmSparseNet(
  xdata,
  ydata,
  network,
  network.options = networkOptions(),
  experiment.name = NULL,
  ...
)
}
\arguments{
\item{xdata}{input data, can be a matrix or MultiAssayExperiment}

\item{ydata}{response data compatible with glmnet}

\item{network}{type of network, see below}

\item{network.options}{options to calculate network}

\item{experiment.name}{Name of experiment in MultiAssayExperiment}

\item{...}{parameters that cv.glmnet accepts}
}
\value{
an object just as cv.glmnet
}
\description{
network parameter accepts:
}
\details{
* string to calculate network based on data (correlation, covariance)
 * matrix representing the network
 * vector with already calculated penalty weights (can also be used directly
   glmnet)
}
\examples{
\donttest{
# Gaussian model
xdata <- matrix(rnorm(500), ncol = 5)
cv.glmSparseNet(xdata, rnorm(nrow(xdata)), "correlation",
  family = "gaussian"
)
cv.glmSparseNet(xdata, rnorm(nrow(xdata)), "covariance",
  family = "gaussian"
)
}

#
#
# Using MultiAssayExperiment with survival model


#
# load data
data("miniACC", package = "MultiAssayExperiment")
xdata <- miniACC

#
# build valid data with days of last follow up or to event
event.ix <- which(!is.na(xdata$days_to_death))
cens.ix <- which(!is.na(xdata$days_to_last_followup))
xdata$surv_event_time <- array(NA, nrow(colData(xdata)))
xdata$surv_event_time[event.ix] <- xdata$days_to_death[event.ix]
xdata$surv_event_time[cens.ix] <- xdata$days_to_last_followup[cens.ix]

#
# Keep only valid individuals
valid.ix <- as.vector(!is.na(xdata$surv_event_time) &
  !is.na(xdata$vital_status) &
  xdata$surv_event_time > 0)
xdata.valid <- xdata[, rownames(colData(xdata))[valid.ix]]
ydata.valid <- colData(xdata.valid)[, c("surv_event_time", "vital_status")]
colnames(ydata.valid) <- c("time", "status")

#
cv.glmSparseNet(xdata.valid,
  ydata.valid,
  nfolds          = 5,
  family          = "cox",
  network         = "correlation",
  experiment.name = "RNASeq2GeneNorm"
)
}
